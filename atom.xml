<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Folio (test)]]></title>
  <link href="http://sensorium.github.com/folio/atom.xml" rel="self"/>
  <link href="http://sensorium.github.com/folio/"/>
  <updated>2012-11-15T01:04:39+11:00</updated>
  <id>http://sensorium.github.com/folio/</id>
  <author>
    <name><![CDATA[Tim Barrass]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[unbelievable]]></title>
    <link href="http://sensorium.github.com/folio/blog/2012/11/12/unbelievable/"/>
    <updated>2012-11-12T22:32:00+11:00</updated>
    <id>http://sensorium.github.com/folio/blog/2012/11/12/unbelievable</id>
    <content type="html"><![CDATA[<h2>here&#8217;s a code block</h2>

<figure class='code'><figcaption><span>_00_Skeleton ++</span><a href='https://github.com/sensorium/Mozzi/blob/master/examples/_00_Skeleton/_00_Skeleton.ino?raw=true'>Mozzi example </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include MozziGuts.h;           </span><span class="c1">// at the top of your sketch</span>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64   </span><span class="c1">// or some other power of 2</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">updateControl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// your control code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">updateAudio</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// your audio code which returns an int between -244 and 243</span>
</span><span class='line'>  <span class="c1">// actually, a char is fine</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// fills the audio buffer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>this might be better..</h2>

<div class="slide" style="cursor: pointer;">Show/Hide</div>


<p></p>

<div class="view"> This will get shown/hidden depending on the toggle above.
<figure class='code'><figcaption><span> (m_00_Skeleton.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_00_Skeleton/m_00_Skeleton.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include MozziGuts.h;           </span><span class="c1">// at the top of your sketch</span>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64   </span><span class="c1">// or some other power of 2</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">updateControl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// your control code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">updateAudio</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// your audio code which returns an int between -244 and 243</span>
</span><span class='line'>  <span class="c1">// actually, a char is fine</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// fills the audio buffer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<figure class='code'><figcaption><span> (m_01_Sinewave.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_01_Sinewave/m_01_Sinewave.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example playing a sinewave at a set frequency,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates the use of Oscil to play a wavetable.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt; </span><span class="c1">// oscillator template</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin2048_int8.h&gt; </span><span class="c1">// sine table for oscillator</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use #define for CONTROL_RATE, not a constant</span>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span> <span class="c1">// set a control rate of 64 (powers of 2 please)</span>
</span><span class='line'>  <span class="n">aSin</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mi">440u</span><span class="p">);</span> <span class="c1">// set the frequency with an unsigned int or a float</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// put changing controls in here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">aSin</span><span class="p">.</span><span class="n">next</span><span class="p">();</span> <span class="c1">// return an int signal centred around 0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// required here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_02_Vibrato.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_02_Vibrato/m_02_Vibrato.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example playing a sinewave with vibrato,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates simple FM using phase modulation.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos8192_int8.h&gt; </span><span class="c1">// table for Oscils to play</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for mtof</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aVibrato</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">const</span> <span class="kt">long</span> <span class="n">intensity</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCos</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">84.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">aVibrato</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">15.f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">vibrato</span> <span class="o">=</span> <span class="n">intensity</span> <span class="o">*</span> <span class="n">aVibrato</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">aCos</span><span class="p">.</span><span class="n">phMod</span><span class="p">(</span><span class="n">vibrato</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_03_FMsynth.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_03_FMsynth/m_03_FMsynth.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of simple FM with the phase modulation technique,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates Oscil::phMod() for phase modulation, </span>
</span><span class='line'><span class="cm"> *  Smooth() for smoothing control signals, </span>
</span><span class='line'><span class="cm"> *  and Mozzi&#39;s fixed point number types for fractional frequencies.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Also shows the limitations of Mozzi&#39;s 16384Hz Sample rate,</span>
</span><span class='line'><span class="cm"> *  as aliasing audibly intrudes as the sound gets brighter around </span>
</span><span class='line'><span class="cm"> *  midi note 48.</span>
</span><span class='line'><span class="cm"> *  </span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos2048_int8.h&gt; </span><span class="c1">// table for Oscils to play</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fixedMath.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Smooth.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 256 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCarrier</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aModulator</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kModIndex</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The ratio of deviation to modulation frequency is called the &quot;index of modulation&quot;. ( I = d / Fm )</span>
</span><span class='line'><span class="c1">// It will vary according to the frequency that is modulating the carrier and the amount of deviation.</span>
</span><span class='line'><span class="c1">// so deviation d = I * Fm</span>
</span><span class='line'><span class="c1">// haven&#39;t quite worked this out properly yet...</span>
</span><span class='line'>
</span><span class='line'><span class="n">Q8n8</span> <span class="n">mod_index</span><span class="p">;</span><span class="c1">// = float_to_Q8n8(2.0f); // constant version</span>
</span><span class='line'><span class="n">Q16n16</span> <span class="n">deviation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Q16n16</span> <span class="n">carrier_freq</span><span class="p">,</span> <span class="n">mod_freq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// FM ratio between oscillator frequencies, stays the same through note range</span>
</span><span class='line'><span class="n">Q8n8</span> <span class="n">mod_to_carrier_ratio</span> <span class="o">=</span> <span class="n">float_to_Q8n8</span><span class="p">(</span><span class="mf">3.f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kNoteChangeDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for note changes</span>
</span><span class='line'><span class="n">Q7n8</span> <span class="n">target_note</span><span class="p">,</span> <span class="n">note0</span><span class="p">,</span> <span class="n">note1</span><span class="p">,</span> <span class="n">note_upper_limit</span><span class="p">,</span> <span class="n">note_lower_limit</span><span class="p">,</span> <span class="n">note_change_step</span><span class="p">,</span> <span class="n">smoothed_note</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// using Smooth on midi notes rather than frequency, </span>
</span><span class='line'><span class="c1">// because fractional frequencies need larger types than Smooth can handle</span>
</span><span class='line'><span class="c1">// Inefficient, but...until there is a better Smooth....</span>
</span><span class='line'><span class="n">Smooth</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">kSmoothNote</span><span class="p">(</span><span class="mf">0.95f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">kNoteChangeDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">768</span><span class="p">);</span> <span class="c1">// ms countdown, taylored to resolution of CONTROL_RATE</span>
</span><span class='line'>  <span class="n">kModIndex</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">.768f</span><span class="p">);</span> <span class="c1">// sync with kNoteChangeDelay</span>
</span><span class='line'>  <span class="n">target_note</span> <span class="o">=</span> <span class="n">note0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">note_change_step</span> <span class="o">=</span> <span class="n">Q7n0_to_Q7n8</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">note_upper_limit</span> <span class="o">=</span> <span class="n">Q7n0_to_Q7n8</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
</span><span class='line'>  <span class="n">note_lower_limit</span> <span class="o">=</span> <span class="n">Q7n0_to_Q7n8</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>
</span><span class='line'>  <span class="n">note0</span> <span class="o">=</span> <span class="n">note_lower_limit</span><span class="p">;</span>
</span><span class='line'>  <span class="n">note1</span> <span class="o">=</span> <span class="n">note_lower_limit</span> <span class="o">+</span> <span class="n">Q7n0_to_Q7n8</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setFreqs</span><span class="p">(</span><span class="n">Q8n8</span> <span class="n">midi_note</span><span class="p">){</span>
</span><span class='line'>  <span class="n">carrier_freq</span> <span class="o">=</span> <span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q8n8_to_Q16n16</span><span class="p">(</span><span class="n">midi_note</span><span class="p">));</span> <span class="c1">// convert midi note to fractional frequency</span>
</span><span class='line'>  <span class="n">mod_freq</span> <span class="o">=</span> <span class="p">((</span><span class="n">carrier_freq</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">)</span> <span class="o">*</span> <span class="n">mod_to_carrier_ratio</span><span class="p">)</span>  <span class="p">;</span> <span class="c1">// (Q16n16&gt;&gt;8) * Q8n8 = Q16n16, beware of overflow</span>
</span><span class='line'>  <span class="n">deviation</span> <span class="o">=</span> <span class="p">((</span><span class="n">mod_freq</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span> <span class="o">*</span> <span class="n">mod_index</span><span class="p">);</span> <span class="c1">// (Q16n16&gt;&gt;16) * Q8n8 = Q24n8, beware of overflow</span>
</span><span class='line'>  <span class="n">aCarrier</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">carrier_freq</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aModulator</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">mod_freq</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// change note</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kNoteChangeDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">target_note</span><span class="o">==</span><span class="n">note0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">note1</span> <span class="o">+=</span> <span class="n">note_change_step</span><span class="p">;</span>
</span><span class='line'>      <span class="n">target_note</span><span class="o">=</span><span class="n">note1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">note0</span> <span class="o">+=</span> <span class="n">note_change_step</span><span class="p">;</span>
</span><span class='line'>      <span class="n">target_note</span><span class="o">=</span><span class="n">note0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// change direction</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">note0</span><span class="o">&gt;</span><span class="n">note_upper_limit</span><span class="p">)</span> <span class="n">note_change_step</span> <span class="o">=</span> <span class="n">Q7n0_to_Q7n8</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">note0</span><span class="o">&lt;</span><span class="n">note_lower_limit</span><span class="p">)</span> <span class="n">note_change_step</span> <span class="o">=</span> <span class="n">Q7n0_to_Q7n8</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// reset eventdelay</span>
</span><span class='line'>    <span class="n">kNoteChangeDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// vary the modulation index</span>
</span><span class='line'>  <span class="n">mod_index</span> <span class="o">=</span> <span class="p">(</span><span class="n">Q8n8</span><span class="p">)</span><span class="mi">350</span><span class="o">+</span><span class="n">kModIndex</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// here&#39;s where the smoothing happens</span>
</span><span class='line'>  <span class="n">smoothed_note</span> <span class="o">=</span> <span class="n">kSmoothNote</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">target_note</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setFreqs</span><span class="p">(</span><span class="n">smoothed_note</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">Q15n16</span> <span class="n">modulation</span> <span class="o">=</span> <span class="n">deviation</span> <span class="o">*</span> <span class="n">aModulator</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">aCarrier</span><span class="p">.</span><span class="n">phMod</span><span class="p">(</span><span class="n">modulation</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_04_Control_Tremelo.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_04_Control_Tremelo/m_04_Control_Tremelo.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of amplitude modulation (as tremelo),</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates audio and control rate updates.</span>
</span><span class='line'><span class="cm"> *  The tremelo oscillator is updated at control rate,</span>
</span><span class='line'><span class="cm"> *  and a Line is used to interpolate the control updates</span>
</span><span class='line'><span class="cm"> *  at audio rate, to remove zipper noise.</span>
</span><span class='line'><span class="cm"> *  A bit contrived and probably less efficient than just </span>
</span><span class='line'><span class="cm"> *  using an audio-rate tremelo oscillator, but hey it&#39;s a demo!</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/triangle_valve_2048_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin2048_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Line.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for mtof</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// audio oscillator</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">TRIANGLE_VALVE_2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSig</span><span class="p">(</span><span class="n">TRIANGLE_VALVE_2048_DATA</span><span class="p">);</span>
</span><span class='line'><span class="c1">// control oscillator for tremelo</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kTremelo</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span>
</span><span class='line'><span class="c1">// a line to interpolate control tremolo at audio rate</span>
</span><span class='line'><span class="n">Line</span> <span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">aGain</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">aSig</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">65.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">kTremelo</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">5.5f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// gain shifted up to give enough range for line&#39;s internal steps</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">gain</span> <span class="o">=</span> <span class="p">(</span><span class="mi">128u</span><span class="o">+</span><span class="n">kTremelo</span><span class="p">.</span><span class="n">next</span><span class="p">())</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">;</span>
</span><span class='line'>   <span class="n">aGain</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">gain</span><span class="p">,</span> <span class="n">AUDIO_RATE</span> <span class="o">/</span> <span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(((</span><span class="kt">long</span><span class="p">)</span> <span class="n">aSig</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">*</span> <span class="n">aGain</span><span class="p">.</span><span class="n">next</span><span class="p">())</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">);</span> <span class="c1">// shifted back to audio range after multiply</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_05_AMsynth.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_05_AMsynth/m_05_AMsynth.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of Amplitude Modulation synthesis</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates modulating the gain of one oscillator</span>
</span><span class='line'><span class="cm"> *  by the instantaneous amplitude of another,</span>
</span><span class='line'><span class="cm"> *  shows the use of fixed-point numbers to express fractional</span>
</span><span class='line'><span class="cm"> *  values, random numbers with rand(), and EventDelay()</span>
</span><span class='line'><span class="cm"> *  for scheduling.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/COS2048_int8.h&gt; </span><span class="c1">// table for Oscils to play</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fixedMath.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// audio oscils</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCarrier</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aModulator</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aModDepth</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling note changes in updateControl()</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kNoteChangeDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// synthesis parameters in fixed point formats</span>
</span><span class='line'><span class="n">Q8n8</span> <span class="n">ratio</span><span class="p">;</span> <span class="c1">// unsigned int with 8 integer bits and 8 fractional bits</span>
</span><span class='line'><span class="n">Q24n8</span> <span class="n">carrier_freq</span><span class="p">;</span> <span class="c1">// unsigned long with 24 integer bits and 8 fractional bits</span>
</span><span class='line'><span class="n">Q24n8</span> <span class="n">mod_freq</span><span class="p">;</span> <span class="c1">// unsigned long with 24 integer bits and 8 fractional bits</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for random notes</span>
</span><span class='line'><span class="n">Q8n0</span> <span class="n">octave_start_note</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">ratio</span> <span class="o">=</span> <span class="n">float_to_Q8n8</span><span class="p">(</span><span class="mf">3.0f</span><span class="p">);</span>   <span class="c1">// define modulation ratio in float and convert to fixed-point</span>
</span><span class='line'>  <span class="n">kNoteChangeDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span> <span class="c1">// note duration ms, within resolution of CONTROL_RATE</span>
</span><span class='line'>  <span class="n">aModDepth</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">13.f</span><span class="p">);</span>     <span class="c1">// vary mod depth to highlight am effects</span>
</span><span class='line'>  <span class="n">randSeed</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">A0</span><span class="p">)</span><span class="o">*</span><span class="n">analogRead</span><span class="p">(</span><span class="n">A1</span><span class="p">));</span> <span class="c1">// reseed the random generator with some noise</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">Q16n16</span> <span class="n">last_note</span> <span class="o">=</span> <span class="n">octave_start_note</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kNoteChangeDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// change octave now and then</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">5</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">last_note</span> <span class="o">=</span> <span class="mi">36</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">6</span><span class="p">)</span><span class="o">*</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// change step up or down a semitone occasionally</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">13</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">last_note</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">-</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// change modulation ratio now and then</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">5</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">ratio</span> <span class="o">=</span> <span class="p">((</span><span class="n">Q8n8</span><span class="p">)</span> <span class="mi">1</span><span class="o">+</span> <span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">5</span><span class="p">))</span> <span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// sometimes add a fractionto the ratio</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">5</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">ratio</span> <span class="o">+=</span> <span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// step up or down 3 semitones (or 0)</span>
</span><span class='line'>    <span class="n">last_note</span> <span class="o">+=</span> <span class="mi">3</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// convert midi to frequency</span>
</span><span class='line'>    <span class="n">Q16n16</span> <span class="n">midi_note</span> <span class="o">=</span> <span class="n">Q8n0_to_Q16n16</span><span class="p">(</span><span class="n">last_note</span><span class="p">);</span>
</span><span class='line'>    <span class="n">carrier_freq</span> <span class="o">=</span> <span class="n">Q16n16_to_Q24n8</span><span class="p">(</span><span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">midi_note</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// calculate modulation frequency to stay in ratio with carrier</span>
</span><span class='line'>    <span class="n">mod_freq</span> <span class="o">=</span> <span class="p">(</span><span class="n">carrier_freq</span> <span class="o">*</span> <span class="n">ratio</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">;</span> <span class="c1">// (Q24n8 * Q8n8) &gt;&gt; 8 = Q24n8</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// set frequencies of the oscillators</span>
</span><span class='line'>    <span class="n">aCarrier</span><span class="p">.</span><span class="n">setFreq_Q24n8</span><span class="p">(</span><span class="n">carrier_freq</span><span class="p">);</span>
</span><span class='line'>    <span class="n">aModulator</span><span class="p">.</span><span class="n">setFreq_Q24n8</span><span class="p">(</span><span class="n">mod_freq</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// reset the note scheduler</span>
</span><span class='line'>    <span class="n">kNoteChangeDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">mod</span> <span class="o">=</span> <span class="p">(</span><span class="mi">128u</span><span class="o">+</span> <span class="n">aModulator</span><span class="p">.</span><span class="n">next</span><span class="p">())</span> <span class="o">*</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">128</span><span class="o">+</span> <span class="n">aModDepth</span><span class="p">.</span><span class="n">next</span><span class="p">());</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="n">mod</span> <span class="o">*</span> <span class="n">aCarrier</span><span class="p">.</span><span class="n">next</span><span class="p">())</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_06_EventDelay.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_06_EventDelay/m_06_EventDelay.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of a sound being toggled on an off,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates scheduling with EventDelay.</span>
</span><span class='line'><span class="cm"> *  EventDelay is a way to make non-blocking</span>
</span><span class='line'><span class="cm"> *  time delays for events.  Use this instead of</span>
</span><span class='line'><span class="cm"> *  the Arduino delay() function, which doesn&#39;t</span>
</span><span class='line'><span class="cm"> *  work with Mozzi.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt; </span><span class="c1">// oscillator template</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin8192_int8.h&gt; </span><span class="c1">// sine table for oscillator</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin</span><span class="p">(</span><span class="n">SIN8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling audio gain changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kGainChangeDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">gain</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aSin</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mi">330u</span><span class="p">);</span> <span class="c1">// set the frequency, using an unsigned int or a float</span>
</span><span class='line'>  <span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// 1 second countdown, within resolution of CONTROL_RATE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">gain</span> <span class="o">=</span> <span class="mi">1</span><span class="o">-</span><span class="n">gain</span><span class="p">;</span> <span class="c1">// flip 0/1</span>
</span><span class='line'>    <span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">aSin</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_07_Smooth.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_07_Smooth/m_07_Smooth.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of a sound changing volume with and without</span>
</span><span class='line'><span class="cm"> *  smoothing of the control signal to remove obvious clicks,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates using Smooth to filter a control signal at audio rate,</span>
</span><span class='line'><span class="cm"> *  EventDelay to schedule changes and rand() to choose random volumes.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt; </span><span class="c1">// oscillator template</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin2048_int8.h&gt; </span><span class="c1">// sine table for oscillator</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Smooth.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 128</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling audio gain changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kGainChangeDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">gainChangeMsec</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  for scheduling turning smoothing on and off</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kSmoothOnOff</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">smoothOnOffMsec</span> <span class="o">=</span> <span class="mi">2000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">smoothness</span> <span class="o">=</span> <span class="mf">0.9975f</span><span class="p">;</span>
</span><span class='line'><span class="n">Smooth</span> <span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">aSmoothGain</span><span class="p">(</span><span class="n">smoothness</span><span class="p">);</span>
</span><span class='line'><span class="n">boolean</span> <span class="n">smoothIsOn</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">target_gain</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">aSin</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mi">330u</span><span class="p">);</span> <span class="c1">// audio oscil set freq with unsigned int</span>
</span><span class='line'>  <span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">gainChangeMsec</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kSmoothOnOff</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">smoothOnOffMsec</span><span class="p">);</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// switch smoothing on and off to show the difference</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kSmoothOnOff</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">smoothIsOn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">aSmoothGain</span><span class="p">.</span><span class="n">setSmoothness</span><span class="p">(</span><span class="mf">0.f</span><span class="p">);</span>
</span><span class='line'>      <span class="n">smoothIsOn</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">aSmoothGain</span><span class="p">.</span><span class="n">setSmoothness</span><span class="p">(</span><span class="n">smoothness</span><span class="p">);</span>
</span><span class='line'>      <span class="n">smoothIsOn</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">kSmoothOnOff</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// random volume changes</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">target_gain</span> <span class="o">=</span> <span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>    <span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">aSmoothGain</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">target_gain</span><span class="p">)</span> <span class="o">*</span> <span class="n">aSin</span><span class="p">.</span><span class="n">next</span><span class="p">())</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">;</span> <span class="c1">// shift back to char precision after multiply</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_08_Smooth_Frequency.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_08_Smooth_Frequency/m_08_Smooth_Frequency.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example sliding between frequencies,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates using Smooth to filter a control signal.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt; </span><span class="c1">// oscillator template</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin2048_int8.h&gt; </span><span class="c1">// sine table for oscillator</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Smooth.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this is a high value to avoid zipper noise</span>
</span><span class='line'><span class="cp">#define CONTROL_RATE 1024 </span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling freq changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kFreqChangeDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Smooth</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">kSmoothFreq</span><span class="p">(</span><span class="mf">0.975f</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">target_freq</span><span class="p">,</span> <span class="n">target_freq1</span><span class="p">,</span> <span class="n">target_freq2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">target_freq1</span> <span class="o">=</span> <span class="mi">441</span><span class="p">;</span>
</span><span class='line'>  <span class="n">target_freq2</span> <span class="o">=</span> <span class="mi">330</span><span class="p">;</span>
</span><span class='line'>  <span class="n">kFreqChangeDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// 1000ms countdown, within resolution of CONTROL_RATE</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kFreqChangeDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">target_freq</span> <span class="o">==</span> <span class="n">target_freq1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">target_freq</span> <span class="o">=</span> <span class="n">target_freq2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">target_freq</span> <span class="o">=</span> <span class="n">target_freq1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">kFreqChangeDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">smoothed_freq</span> <span class="o">=</span> <span class="n">kSmoothFreq</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">target_freq</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aSin</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">smoothed_freq</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">aSin</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_09_LowPass1stOrder.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_09_LowPass1stOrder/m_09_LowPass1stOrder.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example changing the volume of a sound smoothly</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates using LowPass1stOrder to filter a control signal.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt; </span><span class="c1">// oscillator template</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin2048_int8.h&gt; </span><span class="c1">// sine table for oscillator</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;LowPass1stOrder.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 512</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling audio gain changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kGainChangeDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">LowPass1stOrder</span> <span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">128</span><span class="o">&gt;</span> <span class="n">kSmoothGain</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">smoothed_gain</span><span class="p">;</span> <span class="c1">// for conveying kSmoothGain to updateAudio</span>
</span><span class='line'><span class="kt">int</span> <span class="n">target_gain</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">aSin</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mi">330u</span><span class="p">);</span> <span class="c1">// set the frequency with an unsigned int</span>
</span><span class='line'>  <span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span> <span class="c1">// 500ms countdown, within resolution of CONTROL_RATE</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">target_gain</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">target_gain</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">target_gain</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">kGainChangeDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// &gt;&gt;7 chosen through experimentation, to move to useful range</span>
</span><span class='line'>  <span class="n">smoothed_gain</span> <span class="o">=</span> <span class="n">kSmoothGain</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">target_gain</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">7</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">aSin</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">*</span> <span class="n">smoothed_gain</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_10_Line_Gliss.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_10_Line_Gliss/m_10_Line_Gliss.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of sliding smoothly</span>
</span><span class='line'><span class="cm"> *  between oscillator frequencies,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates using a Line to change the</span>
</span><span class='line'><span class="cm"> *  frequency of an oscillator.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Line.h&gt; </span><span class="c1">// for smooth transitions</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt; </span><span class="c1">// oscillator template</span>
</span><span class='line'><span class="cp">#include &lt;tables/triangle_warm8192_int8.h&gt; </span><span class="c1">// triangle table for oscillator</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">TRIANGLE_WARM8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aTriangle</span><span class="p">(</span><span class="n">TRIANGLE_WARM8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Line &lt;type&gt; lineName</span>
</span><span class='line'><span class="n">Line</span> <span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">aGliss</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">lo_note</span> <span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">hi_note</span> <span class="o">=</span> <span class="mi">36</span><span class="p">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">audio_steps_per_gliss</span> <span class="o">=</span> <span class="n">AUDIO_RATE</span> <span class="o">/</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// ie. 4 glisses per second</span>
</span><span class='line'><span class="kt">long</span> <span class="n">control_steps_per_gliss</span> <span class="o">=</span> <span class="n">CONTROL_RATE</span> <span class="o">/</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gliss_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gliss_offset_step</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span>  <span class="n">gliss_offset_max</span> <span class="o">=</span> <span class="mi">36</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span> <span class="c1">// optional control rate parameter</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">counter</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">gliss_offset</span> <span class="o">+=</span> <span class="n">gliss_offset_step</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">gliss_offset</span> <span class="o">&gt;=</span> <span class="n">gliss_offset_max</span><span class="p">)</span> <span class="n">gliss_offset</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">gliss_start</span> <span class="o">=</span> <span class="n">aTriangle</span><span class="p">.</span><span class="n">phaseIncFromFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="kt">float</span><span class="p">(</span><span class="n">lo_note</span><span class="o">+</span><span class="n">gliss_offset</span><span class="p">)));</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">gliss_end</span> <span class="o">=</span> <span class="n">aTriangle</span><span class="p">.</span><span class="n">phaseIncFromFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="kt">float</span><span class="p">(</span><span class="n">hi_note</span><span class="o">+</span><span class="n">gliss_offset</span><span class="p">)));</span>
</span><span class='line'>    <span class="n">aGliss</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">gliss_start</span><span class="p">,</span> <span class="n">gliss_end</span><span class="p">,</span> <span class="n">audio_steps_per_gliss</span><span class="p">);</span>
</span><span class='line'>    <span class="n">counter</span> <span class="o">=</span> <span class="n">control_steps_per_gliss</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">aTriangle</span><span class="p">.</span><span class="n">setPhaseInc</span><span class="p">(</span><span class="n">aGliss</span><span class="p">.</span><span class="n">next</span><span class="p">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">aTriangle</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_11_Line_Gliss_Double.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_11_Line_Gliss_Double/m_11_Line_Gliss_Double.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of sliding smoothly</span>
</span><span class='line'><span class="cm"> *  between oscillator frequencies,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates using a Line to change the</span>
</span><span class='line'><span class="cm"> *  frequency of an oscillator.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Line.h&gt; </span><span class="c1">// for smooth transitions</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt; </span><span class="c1">// oscillator template</span>
</span><span class='line'><span class="cp">#include &lt;tables/triangle_warm8192_int8.h&gt; </span><span class="c1">// triangle table for oscillator</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fixedMath.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">TRIANGLE_WARM8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aTriangle1</span><span class="p">(</span><span class="n">TRIANGLE_WARM8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">TRIANGLE_WARM8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aTriangle2</span><span class="p">(</span><span class="n">TRIANGLE_WARM8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Line &lt;type&gt; lineName</span>
</span><span class='line'><span class="n">Line</span> <span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">aGliss1</span><span class="p">;</span>
</span><span class='line'><span class="n">Line</span> <span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">aGliss2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">lo_note</span> <span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">hi_note</span> <span class="o">=</span> <span class="mi">46</span><span class="p">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">audio_steps_per_gliss</span> <span class="o">=</span> <span class="n">AUDIO_RATE</span> <span class="o">/</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// ie. 4 glisses per second</span>
</span><span class='line'><span class="kt">long</span> <span class="n">control_steps_per_gliss</span> <span class="o">=</span> <span class="n">CONTROL_RATE</span> <span class="o">/</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gliss_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gliss_offset_step</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span>  <span class="n">gliss_offset_max</span> <span class="o">=</span> <span class="mi">36</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">SET_PIN13_OUT</span><span class="p">;</span>
</span><span class='line'>  <span class="n">xorshiftSeed</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">analogRead</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">OUTPUT</span><span class="p">);</span> <span class="c1">// without this, updateControl() gets interrupted ........??</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span> <span class="c1">// optional control rate parameter</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">variation</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">//return ((float)rand((unsigned char)100))/16;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">xorshift96</span><span class="p">()</span><span class="o">&gt;&gt;</span><span class="mi">18</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//return aTriangle1.phaseIncFromFreq(Q16n16_to_Q16n0(Q16n16_mtof(xorshift96()&gt;&gt;16)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span> <span class="c1">// 900 us floats vs 160 fixed</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">counter</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">SET_PIN13_HIGH</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gliss_offset</span> <span class="o">+=</span> <span class="n">gliss_offset_step</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">gliss_offset</span> <span class="o">&gt;=</span> <span class="n">gliss_offset_max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">gliss_offset</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">gliss_offset_step</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>        <span class="n">gliss_offset_step</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">gliss_offset_step</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//long gliss_start = aTriangle1.phaseIncFromFreq(mtof(float(lo_note+gliss_offset)));</span>
</span><span class='line'>    <span class="n">Q16n16</span> <span class="n">gliss_start</span> <span class="o">=</span> <span class="n">aTriangle1</span><span class="p">.</span><span class="n">phaseIncFromFreq</span><span class="p">(</span><span class="n">Q16n16_to_Q16n0</span><span class="p">(</span><span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q8n0_to_Q16n16</span><span class="p">(</span><span class="n">lo_note</span><span class="o">+</span><span class="n">gliss_offset</span><span class="p">))));</span>
</span><span class='line'>    <span class="c1">//long gliss_end = aTriangle1.phaseIncFromFreq(mtof(float(hi_note+gliss_offset)));</span>
</span><span class='line'>    <span class="n">Q16n16</span> <span class="n">gliss_end</span> <span class="o">=</span> <span class="n">aTriangle1</span><span class="p">.</span><span class="n">phaseIncFromFreq</span><span class="p">(</span><span class="n">Q16n16_to_Q16n0</span><span class="p">(</span><span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q8n0_to_Q16n16</span><span class="p">(</span><span class="n">hi_note</span><span class="o">+</span><span class="n">gliss_offset</span><span class="p">))));</span>
</span><span class='line'>    <span class="n">aGliss1</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">gliss_start</span><span class="p">,</span> <span class="n">gliss_end</span><span class="p">,</span> <span class="n">audio_steps_per_gliss</span><span class="p">);</span>
</span><span class='line'>    <span class="n">aGliss2</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">gliss_start</span><span class="o">+</span><span class="p">(</span><span class="n">variation</span><span class="p">()</span><span class="o">*</span><span class="n">gliss_offset</span><span class="p">),</span> <span class="n">gliss_end</span><span class="o">+</span><span class="p">(</span><span class="n">variation</span><span class="p">()</span><span class="o">*</span><span class="n">gliss_offset</span><span class="p">),</span> <span class="n">audio_steps_per_gliss</span><span class="p">);</span>
</span><span class='line'>    <span class="n">counter</span> <span class="o">=</span> <span class="n">control_steps_per_gliss</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SET_PIN13_LOW</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">aTriangle1</span><span class="p">.</span><span class="n">setPhaseInc</span><span class="p">(</span><span class="n">aGliss1</span><span class="p">.</span><span class="n">next</span><span class="p">());</span>
</span><span class='line'>  <span class="n">aTriangle2</span><span class="p">.</span><span class="n">setPhaseInc</span><span class="p">(</span><span class="n">aGliss2</span><span class="p">.</span><span class="n">next</span><span class="p">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">aTriangle1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">+</span><span class="n">aTriangle2</span><span class="p">.</span><span class="n">next</span><span class="p">())</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_12_Control_Oscil_Wash.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_12_Control_Oscil_Wash/m_12_Control_Oscil_Wash.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Plays a fluctuating ambient wash,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates audio and control rate updates.</span>
</span><span class='line'><span class="cm"> *  There are 8 oscillators updated at control rate to set</span>
</span><span class='line'><span class="cm"> *  the volume of 8 audio oscillators.  Updating the volume</span>
</span><span class='line'><span class="cm"> *  at control rate saves processor time, incrementing the</span>
</span><span class='line'><span class="cm"> *  Oscils only 128 times per second rather than at the</span>
</span><span class='line'><span class="cm"> *  audio rate of 16384 Hz.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos8192_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for mtof</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">CONTROL_RATE</span> <span class="o">=</span> <span class="mi">128</span><span class="p">;</span> <span class="c1">// powers of 2 please, default is 64 Hz</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// harmonics</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos1</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos2</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos3</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos4</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos5</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos6</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos7</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos8</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// volume controls</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kVol1</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kVol2</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kVol3</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kVol4</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kVol5</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kVol6</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kVol7</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kVol8</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// audio volumes updated each control interrupt and reused in audio till next control</span>
</span><span class='line'><span class="kt">char</span> <span class="n">v1</span><span class="p">,</span><span class="n">v2</span><span class="p">,</span><span class="n">v3</span><span class="p">,</span><span class="n">v4</span><span class="p">,</span><span class="n">v5</span><span class="p">,</span><span class="n">v6</span><span class="p">,</span><span class="n">v7</span><span class="p">,</span><span class="n">v8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set harmonic frequencies</span>
</span><span class='line'>  <span class="n">aCos1</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">60.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">aCos2</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">74.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">aCos3</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">64.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">aCos4</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">77.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">aCos5</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">67.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">aCos6</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">81.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">aCos7</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">60.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">aCos8</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">84.f</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set volume change frequencies</span>
</span><span class='line'>  <span class="n">kVol1</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">4.43f</span><span class="p">);</span> <span class="c1">// more of a pulse</span>
</span><span class='line'>  <span class="n">kVol2</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.0245f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kVol3</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.019f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kVol4</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.07f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kVol5</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.047f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kVol6</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.031f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kVol7</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.0717f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kVol8</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.041f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v1</span><span class="o">=</span><span class="n">v2</span><span class="o">=</span><span class="n">v3</span><span class="o">=</span><span class="n">v4</span><span class="o">=</span><span class="n">v5</span><span class="o">=</span><span class="n">v6</span><span class="o">=</span><span class="n">v7</span><span class="o">=</span><span class="n">v8</span><span class="o">=</span><span class="mi">127</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>   <span class="n">v1</span> <span class="o">=</span> <span class="n">kVol1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// going at a higher freq, this creates zipper noise, so reduce the gain</span>
</span><span class='line'>   <span class="n">v2</span> <span class="o">=</span> <span class="n">kVol2</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>   <span class="n">v3</span> <span class="o">=</span> <span class="n">kVol3</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>   <span class="n">v4</span> <span class="o">=</span> <span class="n">kVol4</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>   <span class="n">v5</span> <span class="o">=</span> <span class="n">kVol5</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>   <span class="n">v6</span> <span class="o">=</span> <span class="n">kVol6</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>   <span class="n">v7</span> <span class="o">=</span> <span class="n">kVol7</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>   <span class="n">v8</span> <span class="o">=</span> <span class="n">kVol8</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">asig</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span>
</span><span class='line'>    <span class="n">aCos1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">v1</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos2</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">v2</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos3</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">v3</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos4</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">v4</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos5</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">v5</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos6</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">v6</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos7</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">v7</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos8</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">v8</span><span class="p">;</span>
</span><span class='line'>  <span class="n">asig</span> <span class="o">&gt;&gt;=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">asig</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_13_Detuned_Beats_Wash.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_13_Detuned_Beats_Wash/m_13_Detuned_Beats_Wash.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Plays a fluctuating ambient wash using pairs</span>
</span><span class='line'><span class="cm"> *  of slightly detuned oscillators, following an example</span>
</span><span class='line'><span class="cm"> *  from Miller Puckette&#39;s Pure Data manual.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  The detune frequencies are modified by chance in</span>
</span><span class='line'><span class="cm"> *  updateControl(), and the outputs of 14 audio</span>
</span><span class='line'><span class="cm"> *  oscillators are summed in updateAudio().</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates the use of fixed-point Q16n16</span>
</span><span class='line'><span class="cm"> *  format numbers, mtof() for converting midi note</span>
</span><span class='line'><span class="cm"> *  values to frequency, and xorshift96() for random numbers.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos8192_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for mtof and xorshift96() fastish random number generator</span>
</span><span class='line'><span class="cp">#include &lt;fixedMath.h&gt; </span><span class="c1">// for Q16n16 fixed-point fractional number type</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// harmonics</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos1</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos2</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos3</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos4</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos5</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos6</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos7</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// duplicates but slightly off frequency for adding to originals</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos1b</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos2b</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos3b</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos4b</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos5b</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos6b</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCos7b</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// base pitch frequencies in 24n8 fixed int format (for speed later)</span>
</span><span class='line'><span class="n">Q16n16</span> <span class="n">f1</span><span class="p">,</span><span class="n">f2</span><span class="p">,</span><span class="n">f3</span><span class="p">,</span><span class="n">f4</span><span class="p">,</span><span class="n">f5</span><span class="p">,</span><span class="n">f6</span><span class="p">,</span><span class="n">f7</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Q16n16</span> <span class="nf">variation</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 32 random bits &amp; with 524287 (b111 1111 1111 1111 1111)</span>
</span><span class='line'>  <span class="c1">// gives between 0-8 in Q16n16 format</span>
</span><span class='line'>  <span class="k">return</span>  <span class="p">(</span><span class="n">Q16n16</span><span class="p">)</span> <span class="p">(</span><span class="n">xorshift96</span><span class="p">()</span> <span class="o">&amp;</span> <span class="mi">524287UL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="mi">64</span><span class="p">);</span> <span class="c1">// a literal control rate here</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// select base frequencies using mtof (midi to freq) and fixed-point numbers</span>
</span><span class='line'>  <span class="n">f1</span> <span class="o">=</span> <span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q16n0_to_Q16n16</span><span class="p">(</span><span class="mi">48</span><span class="p">));</span>
</span><span class='line'>  <span class="n">f2</span> <span class="o">=</span> <span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q16n0_to_Q16n16</span><span class="p">(</span><span class="mi">74</span><span class="p">));</span>
</span><span class='line'>  <span class="n">f3</span> <span class="o">=</span> <span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q16n0_to_Q16n16</span><span class="p">(</span><span class="mi">64</span><span class="p">));</span>
</span><span class='line'>  <span class="n">f4</span> <span class="o">=</span> <span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q16n0_to_Q16n16</span><span class="p">(</span><span class="mi">77</span><span class="p">));</span>
</span><span class='line'>  <span class="n">f5</span> <span class="o">=</span> <span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q16n0_to_Q16n16</span><span class="p">(</span><span class="mi">67</span><span class="p">));</span>
</span><span class='line'>  <span class="n">f6</span> <span class="o">=</span> <span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q16n0_to_Q16n16</span><span class="p">(</span><span class="mi">57</span><span class="p">));</span>
</span><span class='line'>  <span class="n">f7</span> <span class="o">=</span> <span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">Q16n0_to_Q16n16</span><span class="p">(</span><span class="mi">60</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set Oscils with chosen frequencies</span>
</span><span class='line'>  <span class="n">aCos1</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCos2</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCos3</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCos4</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCos5</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCos6</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCos7</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f7</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set frequencies of duplicate oscillators</span>
</span><span class='line'>  <span class="n">aCos1b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>  <span class="n">aCos2b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f2</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>  <span class="n">aCos3b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f3</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>  <span class="n">aCos4b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f4</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>  <span class="n">aCos5b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f5</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>  <span class="n">aCos6b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f6</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>  <span class="n">aCos7b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f7</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// todo: choose a nice scale or progression and make a table for it</span>
</span><span class='line'>  <span class="c1">// or add a very slow gliss for f1-f7, like shephard tones</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// change frequencies of the b oscillators</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">lowByte</span><span class="p">(</span><span class="n">xorshift96</span><span class="p">())</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">){</span> <span class="c1">// 7 is 0111</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>      <span class="n">aCos1b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>       <span class="n">aCos2b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f2</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>       <span class="n">aCos3b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f3</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="mi">3</span>:
</span><span class='line'>       <span class="n">aCos4b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f4</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="mi">4</span>:
</span><span class='line'>       <span class="n">aCos5b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f5</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="mi">5</span>:
</span><span class='line'>       <span class="n">aCos6b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f6</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="mi">6</span>:
</span><span class='line'>       <span class="n">aCos7b</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">f7</span><span class="o">+</span><span class="n">variation</span><span class="p">());</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">asig</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">aCos1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span> <span class="n">aCos1b</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos2</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span> <span class="n">aCos2b</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos3</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span> <span class="n">aCos3b</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos4</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span> <span class="n">aCos4b</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos5</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span> <span class="n">aCos5b</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos6</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span> <span class="n">aCos6b</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aCos7</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span> <span class="n">aCos7b</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">asig</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_14_Phasemod_Envelope.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_14_Phasemod_Envelope/m_14_Phasemod_Envelope.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of a modulating timbre with a rhythmic</span>
</span><span class='line'><span class="cm"> *  volume envelope, using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates phase modulation and modifying</span>
</span><span class='line'><span class="cm"> *  the volume of a sound with an envelope setd in a table.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos8192_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/envelop2048_uint8.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 512 </span><span class="c1">// quite fast, keeps modulation smooth</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCarrier</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aModulator</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aModWidth</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kModFreq1</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kModFreq2</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">ENVELOP2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aEnvelop</span><span class="p">(</span><span class="n">ENVELOP2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCarrier</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mi">220u</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kModFreq1</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">1.78f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kModFreq2</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.1757f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aModWidth</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.1434f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aEnvelop</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">9.0f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">updateControl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">aModulator</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">277.0f</span> <span class="o">+</span> <span class="mf">0.4313f</span><span class="o">*</span><span class="n">kModFreq1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">+</span> <span class="n">kModFreq2</span><span class="p">.</span><span class="n">next</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">asig</span> <span class="o">=</span> <span class="n">aCarrier</span><span class="p">.</span><span class="n">phMod</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">aModulator</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="p">(</span><span class="mi">260u</span><span class="o">+</span><span class="n">aModWidth</span><span class="p">.</span><span class="n">next</span><span class="p">()));</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">asig</span><span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">aEnvelop</span><span class="p">.</span><span class="n">next</span><span class="p">())</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_15_Table_Resolution.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_15_Table_Resolution/m_15_Table_Resolution.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example playing sine tables of different sizes</span>
</span><span class='line'><span class="cm"> *  with Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates the audible quality of different length tables</span>
</span><span class='line'><span class="cm"> *  played with Oscil and scheduling with EventDelay.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin256_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin512_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin1024_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin2048_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin4096_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin8192_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt; </span><span class="c1">// for scheduling events</span>
</span><span class='line'><span class="cp">#include &lt;Line.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN256_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin0</span><span class="p">(</span><span class="n">SIN256_DATA</span><span class="p">);</span> <span class="c1">// can hear significant aliasing noise</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN512_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin1</span><span class="p">(</span><span class="n">SIN512_DATA</span><span class="p">);</span> <span class="c1">// noise still there but less noticeable</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN1024_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin2</span><span class="p">(</span><span class="n">SIN1024_DATA</span><span class="p">);</span> <span class="c1">// borderline, hardly there if at all</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin3</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span> <span class="c1">// no audible improvement from here on</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN4096_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin4</span><span class="p">(</span><span class="n">SIN4096_DATA</span><span class="p">);</span> <span class="c1">// for 45 year old loud sound damaged ears</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin5</span><span class="p">(</span><span class="n">SIN8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kWhoseTurnDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">NUM_OSCILS</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gain</span><span class="p">[</span><span class="n">NUM_OSCILS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span> <span class="c1">// gain for each oscil</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">whose_turn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// which oscil to listen to</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Line to sweep frequency at control rate</span>
</span><span class='line'><span class="n">Line</span> <span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">kSweep</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">MILLIS_PER_SWEEP</span> <span class="o">=</span> <span class="mi">2000</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">MILLIS_PER_CONTROL</span> <span class="o">=</span> <span class="mi">1000u</span> <span class="o">/</span> <span class="n">CONTROL_RATE</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">CONTROL_STEPS_PER_SWEEP</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">MILLIS_PER_SWEEP</span> <span class="o">/</span> <span class="n">MILLIS_PER_CONTROL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kWhoseTurnDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">MILLIS_PER_SWEEP</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kSweep</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mf">0.f</span><span class="p">,</span> <span class="mf">8192.f</span><span class="p">,</span> <span class="n">CONTROL_STEPS_PER_SWEEP</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kWhoseTurnDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">gain</span><span class="p">[</span><span class="n">whose_turn</span><span class="p">]</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">++</span><span class="n">whose_turn</span> <span class="o">&gt;=</span> <span class="n">NUM_OSCILS</span><span class="p">)</span> <span class="n">whose_turn</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">gain</span><span class="p">[</span><span class="n">whose_turn</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">kWhoseTurnDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="n">kSweep</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">0UL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">whose_turn</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;  &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">millis</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="n">kSweep</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">whose_turn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>    <span class="n">aSin0</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>    <span class="n">aSin1</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>    <span class="n">aSin2</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">3</span>:
</span><span class='line'>    <span class="n">aSin3</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">4</span>:
</span><span class='line'>    <span class="n">aSin4</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">5</span>:
</span><span class='line'>    <span class="n">aSin5</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">asig</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">aSin0</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">aSin1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">aSin2</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">aSin3</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">aSin4</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">aSin5</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">asig</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// required here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_16_Sample.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_16_Sample/m_16_Sample.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of playing a sampled sound,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates one-shot samples scheduled</span>
</span><span class='line'><span class="cm"> *  with EventDelay.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Sample.h&gt; </span><span class="c1">// Sample template</span>
</span><span class='line'><span class="cp">#include &lt;samples/burroughs1_18649_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Sample &lt;table_size, update_rate&gt; SampleName (wavetable)</span>
</span><span class='line'><span class="n">Sample</span> <span class="o">&lt;</span><span class="n">BURROUGHS1_18649_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSample</span><span class="p">(</span><span class="n">BURROUGHS1_18649_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling sample start</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kTriggerDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aSample</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span> <span class="n">BURROUGHS1_18649_SAMPLERATE</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="n">BURROUGHS1_18649_NUM_CELLS</span><span class="p">);</span> <span class="c1">// play at the speed it was recorded</span>
</span><span class='line'>  <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">1500</span><span class="p">);</span> <span class="c1">// 1500 msec countdown, within resolution of CONTROL_RATE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">aSample</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">aSample</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_17_Sample_Offset.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_17_Sample_Offset/m_17_Sample_Offset.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of &quot;scraping&quot; through a sampled sound</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates starting a sample with an offset.</span>
</span><span class='line'><span class="cm"> *  </span>
</span><span class='line'><span class="cm"> *  todo: use a window function to do it smoothly</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Sample.h&gt; </span><span class="c1">// Sample template</span>
</span><span class='line'><span class="cp">#include &lt;tables/horse_lips_8192_int8.h&gt; </span><span class="c1">// table for Sample</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Sample &lt;table_size, update_rate&gt; SampleName (wavetable)</span>
</span><span class='line'><span class="n">Sample</span> <span class="o">&lt;</span><span class="n">HORSE_LIPS_8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSample</span><span class="p">(</span><span class="n">HORSE_LIPS_8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling audio gain changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kTriggerDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">gain</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">scratch</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aSample</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span> <span class="n">HORSE_LIPS_8192_SAMPLERATE</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="n">HORSE_LIPS_8192_NUM_CELLS</span><span class="p">);</span> <span class="c1">// play at the speed it was recorded at</span>
</span><span class='line'>  <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// 1 second countdown, within resolution of CONTROL_RATE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">scratch</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">scratch</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">aSample</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>      <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">scratch</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">offset</span> <span class="o">=</span> <span class="mi">2048</span><span class="p">;</span>
</span><span class='line'>      <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">scratch</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">aSample</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="n">offset</span><span class="p">);</span>
</span><span class='line'>    <span class="n">offset</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">aSample</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_18_Sample_Loop_Points.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_18_Sample_Loop_Points/m_18_Sample_Loop_Points.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example playing a looped sampled sound while </span>
</span><span class='line'><span class="cm"> *  changing the start end end loop points, </span>
</span><span class='line'><span class="cm"> *  and sliding the frequency around,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates Sample(), looping with random </span>
</span><span class='line'><span class="cm"> *  changes to loop and frequency parameters</span>
</span><span class='line'><span class="cm"> *  scheduled with EventDelay.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Sample.h&gt; </span><span class="c1">// Sample template</span>
</span><span class='line'><span class="cp">#include &lt;samples/abomb16384_int8.h&gt; </span><span class="c1">// table for Sample</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 128</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Sample &lt;table_size, update_rate&gt; SampleName (wavetable)</span>
</span><span class='line'><span class="n">Sample</span> <span class="o">&lt;</span><span class="n">ABOMB_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSample</span><span class="p">(</span><span class="n">ABOMB_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kTriggerDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">gain</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">float</span> <span class="n">playspeed</span> <span class="o">=</span> <span class="mf">1.3</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">playspeedmod</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">speedchange</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ms times for beats</span>
</span><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">full</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="mf">1000.f</span><span class="o">/</span><span class="n">playspeed</span><span class="p">)</span> <span class="o">-</span> <span class="mi">23</span><span class="p">;</span> <span class="c1">// adjustment approx for CONTROL_RATE difference</span>
</span><span class='line'><span class="c1">//unsigned int half = full/2;</span>
</span><span class='line'><span class="c1">//unsigned int quarter = full/4;</span>
</span><span class='line'><span class="c1">//unsigned int eighth = full/8;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//unsigned char beat_counter = 0;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">seed</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">A0</span><span class="p">);</span> <span class="c1">// a fresh random start</span>
</span><span class='line'>  <span class="n">randSeed</span><span class="p">(</span><span class="n">seed</span><span class="o">*</span><span class="n">seed</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aSample</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">playspeed</span><span class="o">*</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span> <span class="n">ABOMB_SAMPLERATE</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="n">ABOMB_NUM_CELLS</span><span class="p">));</span>
</span><span class='line'>  <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">full</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aSample</span><span class="p">.</span><span class="n">setLoopingOn</span><span class="p">();</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">choosegain</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">gain</span> <span class="o">=</span> <span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span> <span class="mi">300</span><span class="p">,(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span> <span class="mi">450</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">chooseStart</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">ABOMB_NUM_CELLS</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">chooseEnd</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">startpos</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rand</span><span class="p">(</span><span class="n">startpos</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span> <span class="n">ABOMB_NUM_CELLS</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">chooseSpeedMod</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">speedchange</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">((</span><span class="kt">char</span><span class="p">)</span><span class="o">-</span><span class="mi">100</span><span class="p">,(</span><span class="kt">char</span><span class="p">)</span><span class="mi">100</span><span class="p">)</span><span class="o">/</span><span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">startspeed</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">((</span><span class="kt">char</span><span class="p">)</span><span class="o">-</span><span class="mi">100</span><span class="p">,(</span><span class="kt">char</span><span class="p">)</span><span class="mi">100</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="n">playspeedmod</span> <span class="o">=</span> <span class="n">playspeed</span> <span class="o">+</span> <span class="n">startspeed</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="n">speedchange</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">playspeedmod</span> <span class="o">=</span> <span class="n">playspeed</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">chooseStartEnd</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">s</span><span class="p">,</span><span class="n">e</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">chooseStart</span><span class="p">();</span>
</span><span class='line'>    <span class="n">e</span> <span class="o">=</span> <span class="n">chooseEnd</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">e</span> <span class="o">=</span> <span class="n">ABOMB_NUM_CELLS</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">aSample</span><span class="p">.</span><span class="n">setStart</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aSample</span><span class="p">.</span><span class="n">setEnd</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">chooseStartEnd</span><span class="p">();</span>
</span><span class='line'>    <span class="n">choosegain</span><span class="p">();</span>
</span><span class='line'>    <span class="n">chooseSpeedMod</span><span class="p">();</span>
</span><span class='line'>    <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">playspeedmod</span> <span class="o">+=</span> <span class="n">speedchange</span><span class="p">;</span>
</span><span class='line'>  <span class="n">aSample</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">playspeedmod</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(((</span><span class="kt">long</span><span class="p">)</span> <span class="n">aSample</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gain</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_19_Samples.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_19_Samples/m_19_Samples.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of playing sampled sounds,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates one-shot samples scheduled</span>
</span><span class='line'><span class="cm"> *  with EventDelay(), and fast random numbers with </span>
</span><span class='line'><span class="cm"> *  xorshift96() and rand(), a more friendly wrapper for xorshift96().</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Sample.h&gt; </span><span class="c1">// Sample template</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo1/bamboo1_1024_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo1/bamboo2_1024_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo1/bamboo3_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for xorshift96() random number generator</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Sample &lt;table_size, update_rate&gt; SampleName (wavetable)</span>
</span><span class='line'><span class="n">Sample</span> <span class="o">&lt;</span><span class="n">BAMBOO1_1024_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aBamboo1</span><span class="p">(</span><span class="n">BAMBOO1_1024_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Sample</span> <span class="o">&lt;</span><span class="n">BAMBOO2_1024_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aBamboo2</span><span class="p">(</span><span class="n">BAMBOO2_1024_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Sample</span> <span class="o">&lt;</span><span class="n">BAMBOO3_2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aBamboo3</span><span class="p">(</span><span class="n">BAMBOO3_2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling audio gain changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kTriggerDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aBamboo1</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span> <span class="n">BAMBOO1_1024_SAMPLERATE</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="n">BAMBOO1_1024_NUM_CELLS</span><span class="p">);</span> <span class="c1">// play at the speed it was recorded at</span>
</span><span class='line'>  <span class="n">aBamboo2</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span> <span class="n">BAMBOO2_1024_SAMPLERATE</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="n">BAMBOO2_1024_NUM_CELLS</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aBamboo3</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span> <span class="n">BAMBOO3_2048_SAMPLERATE</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="n">BAMBOO3_2048_NUM_CELLS</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">111</span><span class="p">);</span> <span class="c1">// countdown ms, within resolution of CONTROL_RATE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">randomByte</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">highByte</span><span class="p">(</span><span class="n">xorshift96</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">randomGain</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">//return lowByte(xorshift96())&lt;&lt;1;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rand</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="o">+</span> <span class="mi">55</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// referencing members from a struct is meant to be a bit faster than seperately</span>
</span><span class='line'><span class="c1">// ....haven&#39;t actually tested it here...</span>
</span><span class='line'><span class="k">struct</span> <span class="n">gainstruct</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gain1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gain2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gain3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">gains</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>      <span class="n">gains</span><span class="p">.</span><span class="n">gain1</span> <span class="o">=</span> <span class="n">randomGain</span><span class="p">();</span>
</span><span class='line'>      <span class="n">aBamboo1</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>      <span class="n">gains</span><span class="p">.</span><span class="n">gain2</span> <span class="o">=</span> <span class="n">randomGain</span><span class="p">();</span>
</span><span class='line'>      <span class="n">aBamboo2</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>      <span class="n">gains</span><span class="p">.</span><span class="n">gain3</span> <span class="o">=</span> <span class="n">randomGain</span><span class="p">();</span>
</span><span class='line'>      <span class="n">aBamboo3</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">asig</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">((</span><span class="kt">long</span><span class="p">)</span> <span class="n">aBamboo1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gains</span><span class="p">.</span><span class="n">gain1</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aBamboo2</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gains</span><span class="p">.</span><span class="n">gain2</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">aBamboo3</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">*</span><span class="n">gains</span><span class="p">.</span><span class="n">gain3</span><span class="p">)</span><span class="o">/</span><span class="mi">16</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//clip to keep audio loud but still in range</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">asig</span> <span class="o">&gt;</span> <span class="mi">243</span><span class="p">)</span> <span class="n">asig</span> <span class="o">=</span> <span class="mi">243</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">asig</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">244</span><span class="p">)</span> <span class="n">asig</span> <span class="o">=</span> <span class="o">-</span><span class="mi">244</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">asig</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_20_Wavetable_Swap.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_20_Wavetable_Swap/m_20_Wavetable_Swap.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example swapping between sounds played by a single Oscil</span>
</span><span class='line'><span class="cm"> *  with Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates declaring an Oscil without a table,</span>
</span><span class='line'><span class="cm"> *  and Oscil::setTable() method.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Created by Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tables need to be the same size</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin512_int8.h&gt; </span>
</span><span class='line'><span class="cp">#include &lt;tables/saw_analogue512_int8.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// declare with or without a wavetable, and use setTable() later</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="mi">512</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aOscil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling table swaps</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kSwapTablesDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">boolean</span> <span class="n">using_sin</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kSwapTablesDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span> <span class="c1">// 1 second countdown, within resolution of CONTROL_RATE</span>
</span><span class='line'>  <span class="n">aOscil</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">440.f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">kSwapTablesDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">using_sin</span><span class="p">){</span>
</span><span class='line'>        <span class="n">aOscil</span><span class="p">.</span><span class="n">setTable</span><span class="p">(</span><span class="n">SAW_ANALOGUE512_DATA</span><span class="p">);</span>
</span><span class='line'>        <span class="n">using_sin</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>         <span class="n">aOscil</span><span class="p">.</span><span class="n">setTable</span><span class="p">(</span><span class="n">SIN512_DATA</span><span class="p">);</span>
</span><span class='line'>         <span class="n">using_sin</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">kSwapTablesDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">aOscil</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// required here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_21_Samples_Tables_Arrays.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_21_Samples_Tables_Arrays/m_21_Samples_Tables_Arrays.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of a polyphonic sketch in which </span>
</span><span class='line'><span class="cm"> *  11 sound tables are shared between 3 voices,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates use of Sample() objects as players, </span>
</span><span class='line'><span class="cm"> *  using setTable() to share many sound tables between </span>
</span><span class='line'><span class="cm"> *  a few players, to minimise processing in updateAudio().</span>
</span><span class='line'><span class="cm"> *  Shows how to use Samples and sound tables in arrays,</span>
</span><span class='line'><span class="cm"> *  EventDelay() for scheduling, and rand() to select </span>
</span><span class='line'><span class="cm"> *  sound tables and vary the gain of each player.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Sample.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for rand()</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_00_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_01_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_02_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_03_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_04_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_05_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_06_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_07_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_08_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_09_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'><span class="cp">#include &lt;samples/bamboo/bamboo_10_2048_int8.h&gt; </span><span class="c1">// wavetable data</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling samples to play</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kTriggerDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kTriggerSlowDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">byte</span> <span class="n">ms_per_note</span> <span class="o">=</span> <span class="mi">111</span><span class="p">;</span> <span class="c1">// subject to CONTROL_RATE</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">byte</span> <span class="n">NUM_PLAYERS</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// 3 seems to be enough</span>
</span><span class='line'><span class="k">const</span> <span class="n">byte</span> <span class="n">NUM_TABLES</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sample</span> <span class="o">&lt;</span><span class="n">BAMBOO_00_2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSample</span><span class="p">[</span><span class="n">NUM_PLAYERS</span><span class="p">]</span> <span class="o">=</span><span class="p">{</span>
</span><span class='line'>  <span class="n">Sample</span> <span class="o">&lt;</span><span class="n">BAMBOO_00_2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">BAMBOO_00_2048_DATA</span><span class="p">),</span>
</span><span class='line'>  <span class="n">Sample</span> <span class="o">&lt;</span><span class="n">BAMBOO_01_2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">BAMBOO_01_2048_DATA</span><span class="p">),</span>
</span><span class='line'>  <span class="n">Sample</span> <span class="o">&lt;</span><span class="n">BAMBOO_02_2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">BAMBOO_02_2048_DATA</span><span class="p">),</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// watch out - tables are const (but you can choose which ones you reference)</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">tables</span><span class="p">[</span><span class="n">NUM_TABLES</span><span class="p">]</span> <span class="o">=</span><span class="p">{</span>
</span><span class='line'>  <span class="n">BAMBOO_00_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_01_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_02_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_03_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_04_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_05_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_06_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_07_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_08_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_09_2048_DATA</span><span class="p">,</span>
</span><span class='line'>  <span class="n">BAMBOO_10_2048_DATA</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// gains for each sample player</span>
</span><span class='line'><span class="n">byte</span> <span class="n">gain</span><span class="p">[</span><span class="n">NUM_PLAYERS</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">NUM_PLAYERS</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// play at the speed they&#39;re sampled at</span>
</span><span class='line'>    <span class="p">(</span><span class="n">aSample</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span> <span class="n">BAMBOO_00_2048_SAMPLERATE</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="n">BAMBOO_00_2048_NUM_CELLS</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">ms_per_note</span><span class="p">);</span> <span class="c1">// countdown ms, within resolution of CONTROL_RATE</span>
</span><span class='line'>  <span class="n">kTriggerSlowDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">ms_per_note</span><span class="o">*</span><span class="mi">6</span><span class="p">);</span> <span class="c1">// resolution-dependent inaccuracy leads to polyrhythm :)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">byte</span> <span class="n">randomGain</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rand</span><span class="p">((</span><span class="n">byte</span><span class="p">)</span><span class="mi">80</span><span class="p">,(</span><span class="n">byte</span><span class="p">)</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">byte</span> <span class="n">player</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">gain</span><span class="p">[</span><span class="n">player</span><span class="p">]</span> <span class="o">=</span> <span class="n">randomGain</span><span class="p">();</span>
</span><span class='line'>    <span class="p">(</span><span class="n">aSample</span><span class="p">[</span><span class="n">player</span><span class="p">]).</span><span class="n">setTable</span><span class="p">(</span><span class="n">tables</span><span class="p">[</span><span class="n">rand</span><span class="p">(</span><span class="n">NUM_TABLES</span><span class="p">)]);</span>
</span><span class='line'>    <span class="p">(</span><span class="n">aSample</span><span class="p">[</span><span class="n">player</span><span class="p">]).</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="n">player</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">player</span><span class="o">==</span><span class="n">NUM_PLAYERS</span><span class="p">)</span> <span class="n">player</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">kTriggerDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kTriggerSlowDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">gain</span><span class="p">[</span><span class="n">player</span><span class="p">]</span> <span class="o">=</span> <span class="n">randomGain</span><span class="p">();</span>
</span><span class='line'>    <span class="p">(</span><span class="n">aSample</span><span class="p">[</span><span class="n">player</span><span class="p">]).</span><span class="n">setTable</span><span class="p">(</span><span class="n">tables</span><span class="p">[</span><span class="n">rand</span><span class="p">(</span><span class="n">NUM_TABLES</span><span class="p">)]);</span>
</span><span class='line'>    <span class="p">(</span><span class="n">aSample</span><span class="p">[</span><span class="n">player</span><span class="p">]).</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="n">player</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">player</span><span class="o">==</span><span class="n">NUM_PLAYERS</span><span class="p">)</span> <span class="n">player</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">kTriggerSlowDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">asig</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">byte</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">NUM_PLAYERS</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">asig</span> <span class="o">+=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">aSample</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="n">next</span><span class="p">()</span> <span class="o">*</span> <span class="n">gain</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">asig</span> <span class="o">&gt;&gt;=</span> <span class="mi">6</span><span class="p">;</span> <span class="c1">// shift into usable range</span>
</span><span class='line'>  <span class="c1">//clip any stray peaks to max output range</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">constrain</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">asig</span><span class="p">,</span><span class="o">-</span><span class="mi">244</span><span class="p">,</span><span class="mi">243</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_22_AudioDelay.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_22_AudioDelay/m_22_AudioDelay.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of modulating a signal by using a variable delay,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates AudioDelay.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/triangle_analogue512_int8.h&gt; </span><span class="c1">// wavetable</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos2048_int8.h&gt; </span><span class="c1">// wavetable</span>
</span><span class='line'><span class="cp">#include &lt;AudioDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for mtof</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 256 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">TRIANGLE_ANALOGUE512_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aTriangle</span><span class="p">(</span><span class="n">TRIANGLE_ANALOGUE512_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kFreq</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">AudioDelay</span> <span class="o">&lt;</span><span class="mi">256</span><span class="o">&gt;</span> <span class="n">aDel</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">del_samps</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">aTriangle</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">60.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">kFreq</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">.63f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">del_samps</span> <span class="o">=</span> <span class="mi">128</span><span class="o">+</span><span class="n">kFreq</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">asig</span> <span class="o">=</span> <span class="n">aDel</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">aTriangle</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span> <span class="n">del_samps</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">asig</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_23_AudioDelayFeedback.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_23_AudioDelayFeedback/m_23_AudioDelayFeedback.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of flanging,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates AudioDelayFeedback.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/triangle_analogue512_int8.h&gt; </span><span class="c1">// wavetable</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos8192_int8.h&gt; </span><span class="c1">// wavetable</span>
</span><span class='line'><span class="cp">#include &lt;AudioDelayFeedback.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for mtof</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 128 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">TRIANGLE_ANALOGUE512_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aTriangle</span><span class="p">(</span><span class="n">TRIANGLE_ANALOGUE512_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS8192_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kDelSamps</span><span class="p">(</span><span class="n">COS8192_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">AudioDelayFeedback</span> <span class="o">&lt;</span><span class="mi">128</span><span class="o">&gt;</span> <span class="n">aDel</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">del_samps</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aTriangle</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">mtof</span><span class="p">(</span><span class="mf">48.f</span><span class="p">));</span>
</span><span class='line'>  <span class="n">kDelSamps</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">.163f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aDel</span><span class="p">.</span><span class="n">setFeedbackGain</span><span class="p">(</span><span class="o">-</span><span class="mi">101</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">del_samps</span> <span class="o">=</span> <span class="mi">64</span><span class="o">+</span><span class="n">kDelSamps</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">aDel</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">aTriangle</span><span class="p">.</span><span class="n">next</span><span class="p">(),</span> <span class="n">del_samps</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_24_Ead_Envelope.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_24_Ead_Envelope/m_24_Ead_Envelope.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example playing an enveloped noise source</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates Ead (exponential attack decay).</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt; </span><span class="c1">// oscillator template</span>
</span><span class='line'><span class="cp">#include &lt;tables/whitenoise8192_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Ead.h&gt; </span><span class="c1">// exponential attack decay</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 256 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">WHITENOISE8192_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aNoise</span><span class="p">(</span><span class="n">WHITENOISE8192_DATA</span><span class="p">);</span> <span class="c1">// audio noise</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span> <span class="c1">// for triggering envelope start</span>
</span><span class='line'><span class="n">Ead</span> <span class="n">kEnvelope</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span> <span class="c1">// resolution will be CONTROL_RATE</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">gain</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// cast to float because the resulting freq will be small</span>
</span><span class='line'>  <span class="n">aNoise</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">AUDIO_RATE</span><span class="o">/</span><span class="n">WHITENOISE8192_SAMPLERATE</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">attack</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">decay</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>  <span class="n">kEnvelope</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">attack</span><span class="p">,</span><span class="n">decay</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">attack</span><span class="o">+</span><span class="n">decay</span><span class="o">+</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">kEnvelope</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="n">kDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">gain</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">kEnvelope</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">gain</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">gain</span><span class="o">*</span><span class="n">aNoise</span><span class="p">.</span><span class="n">next</span><span class="p">())</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// required here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_25_LowPassFilter.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_25_LowPassFilter/m_25_LowPassFilter.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of filtering a wave,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates LowPassFilter().</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/chum9_int8.h&gt; </span><span class="c1">// recorded audio wavetable</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos2048_int8.h&gt; </span><span class="c1">// for filter modulation</span>
</span><span class='line'><span class="cp">#include &lt;LowPassFilter.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for rand()</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">CHUM9_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCrunchySound</span><span class="p">(</span><span class="n">CHUM9_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kFilterMod</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">LowPassFilter</span> <span class="n">lpf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCrunchySound</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">2.f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kFilterMod</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">1.3f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">lpf</span><span class="p">.</span><span class="n">setResonance</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// change the modulation frequency now and then</span>
</span><span class='line'>  <span class="c1">//if (lowByte(xorshift96()) &lt; 5){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="n">byte</span><span class="p">)</span><span class="n">CONTROL_RATE</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span> <span class="c1">// about once every half second</span>
</span><span class='line'>    <span class="n">kFilterMod</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">lowByte</span><span class="p">(</span><span class="n">xorshift96</span><span class="p">())</span><span class="o">/</span><span class="mi">64</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// map the modulation into the filter range (0-255)</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">cutoff_freq</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">+</span> <span class="n">kFilterMod</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">lpf</span><span class="p">.</span><span class="n">setCutoffFreq</span><span class="p">(</span><span class="n">cutoff_freq</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">asig</span> <span class="o">=</span> <span class="n">lpf</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">aCrunchySound</span><span class="p">.</span><span class="n">next</span><span class="p">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">asig</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_26_LowPassFilter_AnalogRead_Control.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_26_LowPassFilter_AnalogRead_Control/m_26_LowPassFilter_AnalogRead_Control.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of filtering a wave, with analog inputs for control,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates LowPassFilter(), fixed point fractional number use,</span>
</span><span class='line'><span class="cm"> *  and Mozzi&#39;s setupFastAnalogRead().  In this example, </span>
</span><span class='line'><span class="cm"> *  setupFastAnalogRead() is enough to prevent</span>
</span><span class='line'><span class="cm"> *  glitching during analogRead().  </span>
</span><span class='line'><span class="cm"> *  For more demanding applications,</span>
</span><span class='line'><span class="cm"> *  Mozzi also provides startAnalogRead() and receiveAnalogRead(),</span>
</span><span class='line'><span class="cm"> *  which enable analog input without blocking other processes.</span>
</span><span class='line'><span class="cm"> *  </span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *  3 10k Potentiometers with wipers (middle terminals) </span>
</span><span class='line'><span class="cm"> *  connected to analog pins A2, A3 and A4, and</span>
</span><span class='line'><span class="cm"> *  outside leads to ground and +5V.  </span>
</span><span class='line'><span class="cm"> *  Or your choice of more interesting inputs!</span>
</span><span class='line'><span class="cm"> *  See the Arduino documentation for analogRead().</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/chum9_int8.h&gt; </span><span class="c1">// recorded audio wavetable</span>
</span><span class='line'><span class="cp">#include &lt;tables/cos2048_int8.h&gt; </span><span class="c1">// for filter modulation</span>
</span><span class='line'><span class="cp">#include &lt;LowPassFilter.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt; </span><span class="c1">// for setupFastAnalogRead();</span>
</span><span class='line'><span class="cp">#include &lt;fixedMath.h&gt; </span><span class="c1">// for fractional modulation frequency</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">CHUM9_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aCrunchySound</span><span class="p">(</span><span class="n">CHUM9_DATA</span><span class="p">);</span>
</span><span class='line'><span class="n">Oscil</span><span class="o">&lt;</span><span class="n">COS2048_NUM_CELLS</span><span class="p">,</span> <span class="n">CONTROL_RATE</span><span class="o">&gt;</span> <span class="n">kFilterMod</span><span class="p">(</span><span class="n">COS2048_DATA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">LowPassFilter</span> <span class="n">lpf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CENTRE_FREQ_PIN A2</span>
</span><span class='line'><span class="cp">#define MOD_SPEED_PIN A3</span>
</span><span class='line'><span class="cp">#define MOD_WIDTH_PIN A4</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aCrunchySound</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">2.f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">lpf</span><span class="p">.</span><span class="n">setResonance</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setupFastAnalogRead</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// change any of the ranges here to suit your inputs, etc.</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">centre_freq</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="p">(</span><span class="n">analogRead</span><span class="p">(</span><span class="n">CENTRE_FREQ_PIN</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 0 to 255</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Q16n16</span> <span class="n">modulation_speed</span> <span class="o">=</span> <span class="p">((</span><span class="n">Q16n16</span><span class="p">)</span><span class="n">analogRead</span><span class="p">(</span><span class="n">MOD_SPEED_PIN</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// range 0 to 15, Q16n16 fractional</span>
</span><span class='line'>  <span class="n">kFilterMod</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">modulation_speed</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">modulation_width</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="p">(</span><span class="n">analogRead</span><span class="p">(</span><span class="n">MOD_WIDTH_PIN</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 0 to 63</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">modulation</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">kFilterMod</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="o">*</span> <span class="n">modulation_width</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">;</span> <span class="c1">// -32 to 31 </span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// add centre_freq and modulation, and constrain into the filter range (0-255)</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">cutoff_freq</span> <span class="o">=</span> <span class="n">constrain</span><span class="p">(</span><span class="n">centre_freq</span> <span class="o">+</span> <span class="n">modulation</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lpf</span><span class="p">.</span><span class="n">setCutoffFreq</span><span class="p">(</span><span class="n">cutoff_freq</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">asig</span> <span class="o">=</span> <span class="n">lpf</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">aCrunchySound</span><span class="p">.</span><span class="n">next</span><span class="p">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">asig</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_27_Waveshaper.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_27_Waveshaper/m_27_Waveshaper.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example using waveshaping to modify the spectrum of an audio signal</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates the use of WaveShaper(), EventDelay(), Smooth(),</span>
</span><span class='line'><span class="cm"> *  rand(), and fixed-point numbers.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;WaveShaper.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Smooth.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin2048_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/waveshape_chebyshev_3rd_256_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/waveshape_chebyshev_6th_256_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/waveshape_compress_512_to_488_int16.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// use #define for CONTROL_RATE, not a constant</span>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span> <span class="c1">// sine wave sound source</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aGain1</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span> <span class="c1">// to fade sine wave in and out before waveshaping</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aGain2</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span> <span class="c1">// to fade sine wave in and out before waveshaping</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Chebyshev polynomial curves, The nth curve produces the n+2th harmonic component.</span>
</span><span class='line'><span class="n">WaveShaper</span> <span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">aCheby3rd</span><span class="p">(</span><span class="n">CHEBYSHEV_3RD_256_DATA</span><span class="p">);</span> <span class="c1">// 5th harmonic</span>
</span><span class='line'><span class="n">WaveShaper</span> <span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">aCheby6th</span><span class="p">(</span><span class="n">CHEBYSHEV_6TH_256_DATA</span><span class="p">);</span> <span class="c1">// 8th harmonic</span>
</span><span class='line'><span class="n">WaveShaper</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">aCompress</span><span class="p">(</span><span class="n">WAVESHAPE_COMPRESS_512_TO_488_DATA</span><span class="p">);</span> <span class="c1">// to compress instead of dividing by 2 after adding signals</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling note changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kChangeNoteDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for random notes</span>
</span><span class='line'><span class="n">Q8n0</span> <span class="n">octave_start_note</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="n">Q24n8</span> <span class="n">carrier_freq</span><span class="p">;</span> <span class="c1">// unsigned long with 24 integer bits and 8 fractional bits</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// smooth transitions between notes</span>
</span><span class='line'><span class="n">Smooth</span> <span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">kSmoothFreq</span><span class="p">(</span><span class="mf">0.85f</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">target_freq</span><span class="p">,</span> <span class="n">smoothed_freq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span> <span class="c1">// set a control rate of 64 (powers of 2 please)</span>
</span><span class='line'>  <span class="n">aSin</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mi">110u</span><span class="p">);</span> <span class="c1">// set the frequency with an unsigned int or a float</span>
</span><span class='line'>  <span class="n">aGain1</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">2.f</span><span class="p">);</span> <span class="c1">// use a float for low frequencies, in setup it doesn&#39;t need to be fast</span>
</span><span class='line'>  <span class="n">aGain2</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">.4f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kChangeNoteDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">4000</span><span class="p">);</span> <span class="c1">// note duration ms, within resolution of CONTROL_RATE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">rndPentatonic</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">note</span> <span class="o">=</span> <span class="n">rand</span><span class="p">((</span><span class="n">byte</span><span class="p">)</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">note</span><span class="p">){</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>    <span class="n">note</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>    <span class="n">note</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>    <span class="n">note</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">3</span>:
</span><span class='line'>    <span class="n">note</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">4</span>:
</span><span class='line'>    <span class="n">note</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">note</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kChangeNoteDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="n">byte</span><span class="p">)</span><span class="mi">5</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span> <span class="c1">// about 1 in 5 or so</span>
</span><span class='line'>      <span class="c1">// change octave to midi 24 or any of 3 octaves above</span>
</span><span class='line'>      <span class="n">octave_start_note</span> <span class="o">=</span> <span class="p">(</span><span class="n">rand</span><span class="p">((</span><span class="n">byte</span><span class="p">)</span><span class="mi">4</span><span class="p">)</span><span class="o">*</span><span class="mi">12</span><span class="p">)</span><span class="o">+</span><span class="mi">36</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Q16n16</span> <span class="n">midi_note</span> <span class="o">=</span> <span class="n">Q8n0_to_Q16n16</span><span class="p">(</span><span class="n">octave_start_note</span><span class="o">+</span><span class="n">rndPentatonic</span><span class="p">());</span>
</span><span class='line'>    <span class="n">target_freq</span> <span class="o">=</span> <span class="n">Q16n16_to_Q16n0</span><span class="p">(</span><span class="n">Q16n16_mtof</span><span class="p">(</span><span class="n">midi_note</span><span class="p">));</span> <span class="c1">// has to be 16 bits for Smooth</span>
</span><span class='line'>    <span class="n">kChangeNoteDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">smoothed_freq</span> <span class="o">=</span> <span class="n">kSmoothFreq</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">target_freq</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// temporarily scale up target_freq to get better int smoothing at low values</span>
</span><span class='line'>  <span class="n">aSin</span><span class="p">.</span><span class="n">setFreq</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">smoothed_freq</span><span class="o">/</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// then scale it back down after it&#39;s smoothed</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">asig0</span> <span class="o">=</span> <span class="n">aSin</span><span class="p">.</span><span class="n">next</span><span class="p">();</span> <span class="c1">// sine wave source</span>
</span><span class='line'>  <span class="c1">// make 2 signals fading in and out to show effect of amplitude when waveshaping with Chebyshev polynomial curves</span>
</span><span class='line'>  <span class="c1">// offset the signals by 128 to fit in the 0-255 range for the waveshaping table lookups</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">asig1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">128</span><span class="o">+</span><span class="p">((</span><span class="n">asig0</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">128</span><span class="o">+</span><span class="n">aGain1</span><span class="p">.</span><span class="n">next</span><span class="p">()))</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">asig2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">128</span><span class="o">+</span><span class="p">((</span><span class="n">asig0</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="mi">128</span><span class="o">+</span><span class="n">aGain2</span><span class="p">.</span><span class="n">next</span><span class="p">()))</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// get the waveshaped signals</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">awaveshaped1</span> <span class="o">=</span> <span class="n">aCheby3rd</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">asig1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">awaveshaped2</span> <span class="o">=</span> <span class="n">aCheby6th</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">asig2</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// use a waveshaping table to squeeze 2 summed 8 bit signals into the range -244 to 243</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">awaveshaped3</span> <span class="o">=</span> <span class="n">aCompress</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="mi">256u</span> <span class="o">+</span> <span class="n">awaveshaped1</span> <span class="o">+</span> <span class="n">awaveshaped2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">awaveshaped3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// required here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_28_Waveshaper_Difference_Tone.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_28_Waveshaper_Difference_Tone/m_28_Waveshaper_Difference_Tone.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example using waveshaping to modify the spectrum of an audio signal</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates the use of WaveShaper(), EventDelay(), Smooth(),</span>
</span><span class='line'><span class="cm"> *  rand(), and fixed-point numbers.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Oscil.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;WaveShaper.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;EventDelay.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;utils.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Smooth.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/sin2048_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/waveshape_chebyshev_3rd_256_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/waveshape_chebyshev_6th_256_int8.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tables/waveshape_compress_512_to_488_int16.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// use #define for CONTROL_RATE, not a constant</span>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use: Oscil &lt;table_size, update_rate&gt; oscilName (wavetable)</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin1</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span> <span class="c1">// sine wave sound source</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aSin2</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span> <span class="c1">// sine wave sound source</span>
</span><span class='line'><span class="n">Oscil</span> <span class="o">&lt;</span><span class="n">SIN2048_NUM_CELLS</span><span class="p">,</span> <span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aGain</span><span class="p">(</span><span class="n">SIN2048_DATA</span><span class="p">);</span> <span class="c1">// to fade audio signal in and out before waveshaping</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for scheduling note changes</span>
</span><span class='line'><span class="n">EventDelay</span> <span class="n">kChangeNoteDelay</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// audio frequency as Q16n16 fractional number</span>
</span><span class='line'><span class="n">Q16n16</span> <span class="n">freq1</span> <span class="o">=</span> <span class="n">Q8n0_to_Q16n16</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// smooth transitions between notes</span>
</span><span class='line'><span class="n">Smooth</span> <span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">kSmoothFreq</span><span class="p">(</span><span class="mf">0.85f</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">target_freq</span><span class="p">,</span> <span class="n">smoothed_freq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span> <span class="c1">// set a control rate of 64 (powers of 2 please)</span>
</span><span class='line'>  <span class="n">aSin1</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">freq1</span><span class="p">);</span> <span class="c1">// set the frequency with a Q16n16 fractional number</span>
</span><span class='line'>  <span class="n">aGain</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="mf">0.2f</span><span class="p">);</span> <span class="c1">// use a float for low frequencies, in setup it doesn&#39;t need to be fast</span>
</span><span class='line'>  <span class="n">kChangeNoteDelay</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span> <span class="c1">// note duration ms, within resolution of CONTROL_RATE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">kChangeNoteDelay</span><span class="p">.</span><span class="n">ready</span><span class="p">()){</span>
</span><span class='line'>    <span class="c1">// change proportional frequency of second tone</span>
</span><span class='line'>    <span class="n">byte</span> <span class="n">harmonic</span> <span class="o">=</span> <span class="n">rand</span><span class="p">((</span><span class="n">byte</span><span class="p">)</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>    <span class="n">byte</span> <span class="n">shimmer</span> <span class="o">=</span> <span class="n">rand</span><span class="p">((</span><span class="n">byte</span><span class="p">)</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Q16n16</span> <span class="n">harmonic_step</span> <span class="o">=</span> <span class="n">freq1</span><span class="o">/</span><span class="mi">12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Q16n16</span> <span class="n">freq2difference</span> <span class="o">=</span> <span class="n">harmonic</span><span class="o">*</span><span class="n">harmonic_step</span><span class="p">;</span>
</span><span class='line'>    <span class="n">freq2difference</span> <span class="o">+=</span> <span class="p">(</span><span class="n">harmonic_step</span><span class="o">*</span><span class="n">shimmer</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">11</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Q16n16</span> <span class="n">freq2</span> <span class="o">=</span> <span class="n">freq1</span><span class="o">-</span><span class="n">freq2difference</span><span class="p">;</span>
</span><span class='line'>    <span class="n">aSin2</span><span class="p">.</span><span class="n">setFreq_Q16n16</span><span class="p">(</span><span class="n">freq2</span><span class="p">);</span> <span class="c1">// set the frequency with a Q16n16 fractional number</span>
</span><span class='line'>    <span class="n">kChangeNoteDelay</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">asig</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)((((</span><span class="kt">long</span><span class="p">)</span><span class="n">aSin1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">+</span> <span class="n">aSin2</span><span class="p">.</span><span class="n">next</span><span class="p">())</span><span class="o">*</span><span class="p">(</span><span class="mi">200u</span><span class="o">+</span><span class="n">aGain</span><span class="p">.</span><span class="n">next</span><span class="p">()))</span><span class="o">&gt;&gt;</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">clipped</span> <span class="o">=</span> <span class="n">constrain</span><span class="p">(</span><span class="n">asig</span><span class="p">,</span><span class="o">-</span><span class="mi">244</span><span class="p">,</span><span class="mi">243</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">clipped</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// required here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (m_29_PWM_Phasing.ino)</span> <a href='http://sensorium.github.com/folio/downloads/code/examples/m_29_PWM_Phasing/m_29_PWM_Phasing.ino'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*  Example of pulse width modulation,</span>
</span><span class='line'><span class="cm"> *  using Mozzi sonification library.</span>
</span><span class='line'><span class="cm"> *   </span>
</span><span class='line'><span class="cm"> *  Based Miller Puckette&#39;s j03.pulse.width.mod example </span>
</span><span class='line'><span class="cm"> *  in the Pure Data documentation, subtracting 2 sawtooth </span>
</span><span class='line'><span class="cm"> *  waves with slightly different tunings to produce a </span>
</span><span class='line'><span class="cm"> *  varying phase difference.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Demonstrates Phasor().</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Circuit: Audio output on digital pin 9.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Mozzi help/discussion/announcements:</span>
</span><span class='line'><span class="cm"> *  https://groups.google.com/forum/#!forum/mozzi-users</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Tim Barrass 2012.</span>
</span><span class='line'><span class="cm"> *  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;MozziGuts.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Phasor.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONTROL_RATE 64 </span><span class="c1">// powers of 2 please</span>
</span><span class='line'>
</span><span class='line'><span class="n">Phasor</span> <span class="o">&lt;</span><span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aPhasor1</span><span class="p">;</span>
</span><span class='line'><span class="n">Phasor</span> <span class="o">&lt;</span><span class="n">AUDIO_RATE</span><span class="o">&gt;</span> <span class="n">aPhasor2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">freq</span> <span class="o">=</span> <span class="mf">330.f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">aPhasor1</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">freq</span><span class="p">);</span>
</span><span class='line'>  <span class="n">aPhasor2</span><span class="p">.</span><span class="n">setFreq</span><span class="p">(</span><span class="n">freq</span><span class="o">+</span><span class="mf">0.2f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">startMozzi</span><span class="p">(</span><span class="n">CONTROL_RATE</span><span class="p">);</span> <span class="c1">// set a control rate of 64 (powers of 2 please)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">updateControl</span><span class="p">(){</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">updateAudio</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">asig1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">aPhasor1</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">&gt;&gt;</span><span class="mi">24</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">asig2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">aPhasor2</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="o">&gt;&gt;</span><span class="mi">24</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">asig1</span><span class="o">-</span><span class="n">asig2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">audioHook</span><span class="p">();</span> <span class="c1">// required here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<script type="text/javascript"> 
$(document).ready(function() { 
// Hide the "view" div. 
$('div.view').hide(); 
// Watch for clicks on the "slide" link. 
$('div.slide').click(function() { 
// When clicked, toggle the "view" div. 
$('div.view').slideToggle(400); 
return false; 
}); 
}); 
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://sensorium.github.com/folio/blog/2012/11/12/hello/"/>
    <updated>2012-11-12T22:32:00+11:00</updated>
    <id>http://sensorium.github.com/folio/blog/2012/11/12/hello</id>
    <content type="html"><![CDATA[<iframe width="100%" height="166" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F54943862&amp;auto_play=false&amp;show_artwork=true&amp;color=8400dd"></iframe>




<iframe width="100%" height="166" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F54943739&amp;auto_play=false&amp;show_artwork=false&amp;color=00dddb"></iframe>

]]></content>
  </entry>
  
</feed>
